[{"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\index.js":"1","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\App.js":"2","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\serviceWorker.js":"3","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\redux\\store.js":"4","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\redux\\actionsRedux.js":"5","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeList.js":"6","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\services\\Employee.js":"7","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeForm.js":"8","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\NavBar.js":"9","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeDetails.js":"10"},{"size":694,"mtime":1610989715901,"results":"11","hashOfConfig":"12"},{"size":780,"mtime":1611410303803,"results":"13","hashOfConfig":"12"},{"size":5141,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":189,"mtime":1610899881300,"results":"15","hashOfConfig":"12"},{"size":2017,"mtime":1611399355678,"results":"16","hashOfConfig":"12"},{"size":1735,"mtime":1611475712940,"results":"17","hashOfConfig":"12"},{"size":1268,"mtime":1611476420739,"results":"18","hashOfConfig":"12"},{"size":5645,"mtime":1611476789457,"results":"19","hashOfConfig":"12"},{"size":806,"mtime":1611409263350,"results":"20","hashOfConfig":"12"},{"size":3420,"mtime":1611477109397,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"nxz3km",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\index.js",[],["45","46"],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\App.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\serviceWorker.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\redux\\store.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\redux\\actionsRedux.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeList.js",["47"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { DeleteEmployee, GetAllEmployee } from '../services/Employee';\r\nimport { Button, Table  } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default () => {\r\n    \r\n    const employee = useSelector(state => state.actionsRedux.employee);\r\n\r\n     //hook του react-redux για να παρουμε την εκασθοτε αλλαγη που θελουμε\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        GetAllEmployee(dispatch);\r\n    }, [dispatch]);\r\n\r\n   \r\n\r\n    return(\r\n        <div>\r\n    <Table style={{width: '100%',height: '50%'}} variant=\"dark\">\r\n        <thead>\r\n            <tr>\r\n                <td>#</td>\r\n                <td>First Name</td>\r\n                <td>Last Name</td>\r\n                <td>Phone</td>\r\n                <td>Address</td>\r\n                <td>Email</td>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {employee.map(post =>\r\n            <tr key={post.id}>\r\n                <td>{post.id}</td>\r\n                <td>{post.firstName}</td>\r\n                <td>{post.lastName}</td>\r\n                <td>{post.phone}</td>\r\n                <td>{post.address}</td>\r\n                <td>{post.email}</td>\r\n                <td><Link to={`/EmployeeDetails/${post.id}`}><Button color=\"success\">Edit</Button></Link></td>   \r\n                <td> <Button className='btn btn-danger' onClick={() => DeleteEmployee(dispatch, post)}>Delete</Button> </td>  \r\n            </tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n        <a className=\"btn btn-success\" href=\"/EmployeeForm\" role=\"button\">Add</a>\r\n    </div>\r\n          \r\n    )\r\n}","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\services\\Employee.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeForm.js",["48"],"import { React, useState, useEffect } from 'react';\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { EditEmployee, NewEmployee } from '../services/Employee';\r\nimport { useDispatch } from 'react-redux';\r\nimport \"./Form.css\";\r\n\r\nexport default ({ employee, setIsEditing }) => {\r\n  const [firstName, setfirstName] = useState(\"\");\r\n  const [lastName, setlastName] = useState(\"\");\r\n  const [email, setemail] = useState(\"\");\r\n  const [address, setaddress] = useState(\"\");\r\n  const [phone, setphone] = useState(\"\");\r\n  const [isNewEmployee, setIsNewEmployee] = useState(true);\r\n\r\n  //hook του react-redux για να παρουμε την εκασθοτε αλλαγη που θελουμε\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  useEffect(() => {\r\n    if (employee !== undefined) {\r\n      setIsNewEmployee(false);\r\n      setfirstName(employee.firstName);\r\n      setlastName(employee.lastName);\r\n      setemail(employee.email);\r\n      setaddress(employee.address);\r\n      setphone(employee.phone);\r\n    }\r\n    else {\r\n      setIsNewEmployee(true);\r\n    }\r\n  }, [employee]);\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (isNewEmployee) {\r\n      NewEmployee(dispatch, { lastName: lastName, firstName: firstName, email: email, address: address, phone: phone });\r\n    }\r\n    else {\r\n      EditEmployee(dispatch, { lastName: lastName, firstName: firstName, email: email, address: address, phone: phone });\r\n      setIsEditing(false);\r\n    }\r\n    const isValid = formValidation();\r\n    if (isValid) {\r\n      alert(\"Form submitted\");\r\n    } else {\r\n      alert(\"FORM INVALID - DISPLAY ERROR MESSAGE\")\r\n    }\r\n  }\r\n\r\n  const [lastNameError, setlastNameError] = useState({});\r\n  const [firstNameError, setfirstNameError] = useState({});\r\n  const [emailError, setemailError] = useState({});\r\n  const [addressError, setaddressError] = useState({});\r\n  const [phoneError, setphoneError] = useState({});\r\n\r\n\r\n\r\n  const formValidation = () => {\r\n\r\n    //create empty error list foreach value\r\n    const lastNameError = {};\r\n    const firstNameError = {};\r\n    const addressError = {};\r\n    const emailError = {};\r\n    const phoneError = {};\r\n    let isValid = true;\r\n\r\n    //first name\r\n    if (!firstName) {\r\n      firstNameError[\"firstName\"] = \"First Name Cannot be empty\";\r\n      isValid = false;\r\n    }\r\n\r\n\r\n    if (!firstName.match(/^[a-zA-Z]+$/)) {\r\n      firstNameError[\"firstName\"] = \"First Name must have only letters\";\r\n      isValid = false;\r\n    }\r\n\r\n\r\n    //lastName\r\n    if (!lastName) {\r\n      lastNameError[\"firstName\"] = \"Last Name cannot be empty\";\r\n      isValid = false;\r\n    }\r\n\r\n\r\n    if (!lastName.match(/^[a-zA-Z]+$/)) {\r\n      lastNameError[\"lastName\"] = \"Last Name must have only letters\";\r\n      isValid = false;\r\n    }\r\n\r\n\r\n    //Email\r\n    if (!email) {\r\n      emailError[\"email\"] = \"Email cannot be empty\";\r\n      isValid = false;\r\n    }\r\n\r\n    //Address\r\n    if (address.trim().length < 1) {\r\n      addressError[\"address\"] = \"Address cannot be empty\";\r\n      isValid = false;\r\n    }\r\n\r\n    //Phone\r\n    if (phone.trim().length < 1) {\r\n      phoneError[\"phone\"] = \"Phone cannot be empty\";\r\n      isValid = false;\r\n    }\r\n\r\n    if (!phone.match(/^[0-9\\b]+$/)) {\r\n      phoneError[\"phone\"] = \"Phone must have only number\";\r\n      isValid = false;\r\n    }\r\n\r\n    //fill error list foreach value.If exist errors.\r\n    setlastNameError(lastNameError);\r\n    setfirstNameError(firstNameError);\r\n    setaddressError(addressError);\r\n    setemailError(emailError);\r\n    setphoneError(phoneError);\r\n\r\n    return isValid;\r\n  }\r\n\r\n  return (\r\n    <Form id=\"contact-form\" onSubmit={handleSubmit}>\r\n      <Form.Group value={firstName} onChange={event => setfirstName(event.target.value)}>\r\n        <Form.Label>First Name:</Form.Label>\r\n        <Form.Control placeholder=\"First Name\" />\r\n        {Object.keys(firstNameError).map((key) => {\r\n          return <div style={{ color: \"red\" }}>{firstNameError[key]}</div>\r\n        })}\r\n      </Form.Group>\r\n      <Form.Group value={lastName} onChange={event => setlastName(event.target.value)}>\r\n        <Form.Label>Last Name :</Form.Label>\r\n        <Form.Control placeholder=\"Last Name\" />\r\n        {Object.keys(lastNameError).map((key) => {\r\n          return <div style={{ color: \"red\" }}>{lastNameError[key]}</div>\r\n        })}\r\n      </Form.Group>\r\n      <Form.Group value={email} onChange={event => setemail(event.target.value)}>\r\n        <Form.Label>Email :</Form.Label>\r\n        <Form.Control placeholder=\"Email\" />\r\n        {Object.keys(emailError).map((key) => {\r\n          return <div style={{ color: \"red\" }}>{emailError[key]}</div>\r\n        })}\r\n      </Form.Group>\r\n      <Form.Group value={address} onChange={event => setaddress(event.target.value)}>\r\n        <Form.Label>Address :</Form.Label>\r\n        <Form.Control placeholder=\"Address\" />\r\n        {Object.keys(addressError).map((key) => {\r\n          return <div style={{ color: \"red\" }}>{addressError[key]}</div>\r\n        })}\r\n      </Form.Group>\r\n      <Form.Group value={phone} onChange={event => setphone(event.target.value)}>\r\n        <Form.Label>Phone:</Form.Label>\r\n        <Form.Control placeholder=\"Phone\" />\r\n        {Object.keys(phoneError).map((key) => {\r\n          return <div style={{ color: \"red\" }}>{phoneError[key]}</div>\r\n        })}\r\n      </Form.Group>\r\n      <div style={{ marginTop: 'auto' }}>\r\n        {\r\n          isNewEmployee ? <Button variant='primary' type='submit'>Add</Button>\r\n            :\r\n            <div>\r\n              <Button style={{ marginRight: '2px' }} variant='success' type='submit'>Save</Button>\r\n            </div>}\r\n      </div>\r\n\r\n    </Form>\r\n  )\r\n}","C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\NavBar.js",[],"C:\\Users\\User\\Desktop\\project\\CompanyEmployee\\my-app\\src\\components\\EmployeeDetails.js",["49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":9,"column":1,"nodeType":"56","endLine":54,"endColumn":2},{"ruleId":"54","severity":1,"message":"55","line":7,"column":1,"nodeType":"56","endLine":177,"endColumn":2},{"ruleId":"57","severity":1,"message":"58","line":25,"column":9,"nodeType":"59","messageId":"60","endLine":37,"endColumn":18,"fix":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"64","text":"65"},"no-global-assign","no-unsafe-negation",[1095,1097],"."]